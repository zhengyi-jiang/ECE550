#ifndef __BSTMAP_H__
#define __BSTMAP_H__
#include "map.h"
#include <cstdlib>

template<typename T, typename W>
class BstMap: public Map<T, W> {
private:
  class Node{
  public:
    T key;
    W value;
    Node * left;
    Node * right;
    Node():left(NULL),right(NULL){}
    Node(T k, W v, Node *l, Node *r):key(k),value(v),left(l),right(r){}
  };
  Node *root;
  
public:
  BstMap():root(NULL){}
  BstMap(const BstMap &rhs):root(NULL){
    copy(rhs.root);
  }
  BstMap &operator= (const BstMap &rhs){
    BstMap temp(rhs);
    std::swap(temp.root,root);
  }
			  
			  
  void copy(const Node *curr){
    if(curr != NULL){
      copy(curr->left);
      copy(curr->right);
      add(curr->key, curr->value);
    }
  }
  
  Node *addhelper(const T & key, const W & value, Node *curr){
    if(curr == NULL){
      curr = new Node(key, value, NULL, NULL);
      return curr;
    }
    if(key < curr->key){
      curr->left = addhelper(key, value, curr->left);
      return curr;
    }
    else if(key == curr->key){
      curr->value =value ;
      return curr;
    }
    else{
      curr->right = addhelper(key, value, curr->right);
      return curr;
    }
  }
    
  virtual void add(const T & key, const W & value){
    root = addhelper(key, value, root);
  }
    
  void lookuphelper(const T& key, Node *curr, W*ans, bool ass) const{
    if(curr != NULL){
      if(curr->key == key){
	*ans = (curr->value);
	ass = true;
	return;
      }
      else{
	lookuphelper(key ,curr->left, ans, ass);
	lookuphelper(key, curr->right, ans, ass);
      }
    }
    return;
  }
  
  virtual const W & lookup(const T& key) const throw (std::invalid_argument){
    bool a = false;
    bool *ass = &a;
    int use = 0
    W *ans = &(W)use;
    lookuphelper(key, root, ans, ass);
    if(ans == false){
      throw std::invalid_argument("can't find it");
    }
    else{
      return *ans;
    }
  }

  Node *removehelper(const T& key, Node *curr){
    if(curr != NULL){
      if(curr->key == key){
	if(curr -> left == NULL){
	  Node *temp = curr->right;
	  delete curr;
	  return temp;
	}
	else if(curr -> right == NULL){
	  Node *temp = curr->left;
	  delete curr;
	  return temp;
	}
	else{
	  Node *torp = curr->right;
	  Node *torpup = curr;
	  while(torp->left != NULL && torp->right != NULL){
	    torpup = torp;
	    torp = torp->left;
	  }
	  Node *templeft = curr->left;
	  Node *tempright = curr->right;
	  if(torp -> left == NULL){
	    Node *temp = curr->right;
	    torpup->left = temp;
	    
	  }
	  else if(torp -> right == NULL){
	    Node *temp = curr->left;
	    torpup->left = temp;
	  }
	  torp->left = templeft;
	  torp->right = tempright;
	  delete curr;
	  return torp;
	} 
      }
      else{
	curr->left = removehelper(key ,curr->left);
	curr->right = removehelper(key, curr->right);
      }
    }
    return curr;
  }
  
  virtual void remove(const T& key){
    root = removehelper(key, root);
  }
  

  
  void destory(Node *curr){
    if(curr != NULL){
      destory(curr->left);
      destory(curr->right);
      delete curr;
    }
  }

virtual ~BstMap<T,W>() {destory(root);}
};
#endif
